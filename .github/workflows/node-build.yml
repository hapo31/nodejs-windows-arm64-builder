# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  workflow_dispatch:
  schedule:
    - cron: "* 15 * * 1"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  check_releases:
    # The type of runner that the job will run on
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: 1.13

      - name: Check releases
        run: |
          $ver = go run check_release.go hapo31/nodejs-windows-arm64-builder nodejs/node
          echo "::set-output name=tag::$ver"
        id: check_release
      
      - name: debug
        run: |
          echo ${{steps.check_release.outputs.tag}}
          echo ${{startswith(steps.check_release.outputs.tag, 'v')}}
    outputs:
      tag: ${{ steps.check_release.outputs.tag }}

  build:
    if: startswith(needs.check_releases.outputs.tag, 'v')
    runs-on: windows-latest
    needs: check_releases
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.check_releases.outputs.tag }}
          repository: nodejs/node
          path: node

      - uses: warrenbuckley/Setup-MSBuild@v1
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Build nodejs from latest release
        run: |
          cd node
          ./vcbuild arm64
          Compress-Archive -Path ./out/Release/node.exe -DestinationPath ./node.exe.zip
          
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check_releases.outputs.tag }}_${{ github.run_number }}
          release_name: ${{ needs.check_releases.outputs.tag }} - Windows arm64
          body: build from https://github.com/nodejs/node/releases/${{ needs.check_releases.outputs.tag }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./node.exe.zip
          asset_name: node-${{ needs.check_releases.outputs.tag }}-windows-aarch64.zip
          asset_content_type: application/zip